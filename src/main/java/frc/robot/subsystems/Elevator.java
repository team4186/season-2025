package frc.robot.subsystems;
import com.revrobotics.spark.SparkLowLevel;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.RelativeEncoder;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.DigitalInput;

public class Elevator {

    // Motor, Encoder, and Limit Switches variables
    private SparkMax motor1;
    private SparkMax motor2;

    private RelativeEncoder encoder1;
    private RelativeEncoder encoder2;

    // Make id # correct
    private DigitalInput bottomLimitSwitch = new DigitalInput(2);
    private DigitalInput topLimitSwitch = new DigitalInput(3);

    private PIDController pid;

    private int level;

    public Elevator(int motor1ID, int motor2ID, PIDController pidParam) {
        motor1 = new SparkMax(motor1ID, SparkLowLevel.MotorType.kBrushless);
        motor2 = new SparkMax(motor2ID, SparkLowLevel.MotorType.kBrushless);

        encoder1 = motor1.getEncoder();
        encoder2 = motor2.getEncoder();

        pid = pidParam;
    }

    public void goToLevel(int controllerInput) {
        level = controllerInput;
        int distanceToLevel;

        /*
        This is the thing we can do to find the distance the motor has traveled.

        To get the distance traveled from a bore encoder, you need to count the number of pulses generated by the encoder and multiply that number by the "distance per pulse" which is calculated based on the circumference of the bore and the encoder's resolution (pulses per revolution) - essentially, converting the rotational movement of the bore into a linear distance traveled.
Key steps:
Measure the bore circumference: This is the distance traveled for one full rotation of the bore.
Find the encoder resolution: This is the number of pulses the encoder generates per revolution.
Calculate "distance per pulse": Divide the bore circumference by the encoder resolution.
Read encoder pulses: In your control system, read the number of pulses generated by the encoder.
Calculate distance traveled: Multiply the "distance per pulse" by the number of encoder pulses rea
         */

        switch (level) {
            case 1:
                distanceToLevel = 5;
                break;
            case 2:
                distanceToLevel = 10;
                break;
            case 3:
                distanceToLevel = 15;
                break;
        }


    }

    public void stopMotor() {
        motor1.stopMotor();
        motor2.stopMotor();
        pid.reset();
    }
}